{
  "hash": "35caffb20fc9e86f596deb89452bcc9b",
  "result": {
    "markdown": "# NB: GGPlot2\n\n## Introduction\n\nToday we'll look at GGPlot2, the graphics package associated with the\n**Tidyverse**.\n\n## Learning Goal\n\nYou will be introduced into how and why to use **visualizations** in DS 6001.\n\n-   Visualizations in EDA\n\n-   Visualization in creating data products that communicate results, such as\n    scientific publications, infographics, and interactive visualizations.\n\nThese things come at the end of the data science **pipeline**.\n\nToday, I just want to introduce you to the thinking and **design logic** behind\nthe package, so you can be confident in learning more as you need to.\n\n## The Grammar of Graphics\n\nAs with Dplyr, GGPlot2 is a an entirely new system that **supplants** the older\ngraph functions that are built into R.\n\nAnd just as with Dplyr, it is founded on a principled analysis of its domain and\napproaches code design through developing a basic **grammar** which can then be\nexpressed in R.\n\nIn effect, Dplyr is built on a **grammar of data** by defining a set of\n**verbs** that can be used to build phrases that are put together into larger\nconstructs.\n\nThese verbs correspond to a **process** of data transformation.\n\nGGPlot2 is built on a **grammar of graphics** that defines a set of **nouns**\nthat correspond to **the architecture of a graphic** (aka plot).\n\nThe phrase \"grammar of graphics\" actually comes from the book by that name\nwritten by statistician and computer scientist **Leland Wilkinson** in 1999 and\nlater revised:\n\n[![The Second\nEdition](images/paste-39DF579F.png)](https://www.google.com/books/edition/The_Grammar_of_Graphics/YGgUswEACAAJ?hl=en)\n\nIt's worth reading if you want to get a solid grounding in visualization, which\nbelongs to the **design area of data science**.\n\n## A Layered Model\n\nWilkinson takes an **object-oriented approach** to visualization and formalizes\ntwo main **principles**:\n\nI.  **Graphics** are built out of distinct ***layers*** of grammatical\n    **elements.**\nII. In each layer, meaningful **plots** are constructed through **mappings of\n    data onto aesthetics.**\n\nThe essential grammatical elements to create any visualization are:\n\n![](images/paste-E167991C.png)\n\nAccording to Wickham, who adopted these principles and applied them to R,\n\n> A grammar of graphics is a tool that enables us to **concisely describe the\n> components of a graphic**. Such a grammar allows us to **move beyond named\n> graphics** (e.g., the \"scatterplot\") and gain insight into **the deep\n> structure** that underlies statistical graphics ([Wickham\n> 2012](https://www.tandfonline.com/doi/abs/10.1198/jcgs.2009.07098)).\n\nWickham takes this idea and develops it into this:\n\n![](images/paste-D2214B2A.png)\n\n[Source](https://blog.gramener.com/grammar-of-graphics-data-stories/) (see also\n[ScienceCraft](https://www.science-craft.com/2014/07/08/introducing-the-grammar-of-graphics-plotting-concept/)).\n\nYou can see that everything starts with **data.**\n\nThen data are mapped on **aesthetics** within **geometries.**\n\n-   **Geometries** are geometric things like points, lines, and bars.\n\n-   **Aesthetics** are visual things like position, size, color and shape.\n\nYou can see how the latter are properties of the former.\n\nAlso note that aesthetics make use of visual channels to signify\n\n-   Size can means greater than, which is good for numeric scale but not\n    categories\n\n-   Color can signify things like value, e.g. via\n    `red : dangerous : : green : safe`.\n\nThese are the primary layers. The other layers apply **downstream\nmodifications** that add more **information** and **style** to the graph.\n\n## The Bare Minimum\n\nEverything starts with `ggplot()` which is part of the Tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching packages --------------------------------------- tidyverse 1.3.2 --\nv ggplot2 3.3.5     v purrr   1.0.1\nv tibble  3.2.1     v dplyr   1.1.1\nv tidyr   1.2.1     v stringr 1.5.0\nv readr   2.1.3     v forcats 1.0.0\n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\n```\n:::\n:::\n\n\n\nHere is a basic graph -- a scatterplot comparing two features in the iris\ndataset. I've broken out the functions and arguments so you can see how the\ngrammar is implemented:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\nggplot(\n  mapping = aes(\n    x = Sepal.Length, \n    y = Sepal.Width)\n  ) + \n  geom_point(size=3, aes(color=Species))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n`ggplot()` starts by creating a **coordinate system** that you can add\n**layers** to.\n\n-   The **coordinate system** can be changed after the graph is initiated.\n\nThese **layers** are created by **geometry functions.**\n\n-   For example, `geom_point` creates a point-based visualization.\n-   There are many `geom_` functions, and they can be layered on top of each\n    other:\n    -   `geom_point()`\n    -   `geom_bar()`\n    -   `geom_histogram()`\n    -   `geom_boxplot()`\n    -   etc.\n\nHere we have a plot with two layers. The second layer is created by a **stat**\nfunction, which is similar to geom, but applies a statistical transformation to\nthe data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThe core the process is that each layer **maps** **data** onto what are called\n**aesthetics (`aes`).**\n\nAesthetics are **visual objects and properties** that can used to represent\nnumeric and categorical values\n\n-   x and y positions (in a two-dimensional system)\n-   Color\n-   Size\n-   Shape\n-   Text\n\nIn addition to these elements, ggplot also provides **faceting**, which is the\nvisual equivalent of grouping by. Just as with group by, a data feature is used\nto divide the visualization into groups, each taking the same form but showing a\ndifferent subset of data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\nggplot(aes(\n  x = Sepal.Length, \n  y = Sepal.Width)) + \n  geom_point(size=3, aes(color=Species)) + \n  stat_smooth(method = lm) +\n  facet_wrap(facets = vars(Species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n> By the way, this is an example of Simpson's Paradox. The overall trend is\n> downward, but each group trend upward.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>%\n  ggplot(aes(\n    x = Sepal.Length, \n    y = Sepal.Width)) + \n    geom_point(size=3, aes(color=Species)) + \n    stat_smooth(method = lm) +\n    stat_smooth(method = lm, se=FALSE, aes(color=Species))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula 'y ~ x'\n`geom_smooth()` using formula 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nAnyway, the **general structure** of a ggplot statement is the following:\n\n    ggplot(data = <DATA>) + \n      <GEOM_FUNCTION>(\n         mapping = aes(<MAPPINGS>),\n         stat = <STAT>, \n         position = <POSITION>\n      ) +\n      <COORDINATE_FUNCTION> +\n      <FACET_FUNCTION>\n\n## The `+` operator\n\nYou will notice the use of the `+` operator to connect ggplot functions together\nto produce a final product. Theses are not quite the same as pipes `%>%`.\n\nThe difference is that pipes feed data from one function to another, whereas the\n`+` operation combines elements to produce an increasingly developed\nvisualization.\n\nAnother thing to keep in mind: the `+` always goes at the **end of a line**, not\nat the beginning.\n\n# Examples\n\nLet look at how to build out graphics using the built-in diamonds data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53,940 x 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# i 53,930 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n    ggplot(aes(x=carat, y=price)) + \n    geom_point()\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-14-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nHere's another way to construct a graphic. By assigning it a variable, we can\nkeep adding to it and showing out work.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg <- ggplot(diamonds, aes(x=carat, y=price)) \ngg + geom_point()\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-16-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n`stroke` controls the thickness of point boundary\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg + geom_point(\n  size=1, \n  shape=1, \n  color=\"steelblue\", \n  stroke=2)  \n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nLet's map the variables carat, cut and color to various aesthetics in our\ngeometry function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg + geom_point(aes(\n  size=carat, \n  shape=cut, \n  color=color, \n  stroke=carat))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using shapes for an ordinal variable is not advised\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Add Title, X and Y axis labels with `labs()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg1 <- gg + geom_point(aes(color=color))\ngg2 <- gg1 + labs(title=\"Diamonds\", x=\"Carat\", y=\"Price\") \ngg2\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-22-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change color of all text with `theme()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg2 + theme(text=element_text(color=\"blue\"))  # all text turns blue.\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-24-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change title, X and Y axis label and text size\n\n-   `plot.title`: Controls plot title.\n-   `axis.title.x`: Controls X axis title\n-   `axis.title.y`: Controls Y axis title\n-   `axis.text.x`: Controls X axis text\n-   `axis.text.y`: Controls y axis text\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 <- gg2 + \n  theme(plot.title=element_text(size=25), \n        axis.title.x=element_text(size=20),\n        axis.title.y=element_text(size=20),\n        axis.text.x=element_text(size=15),\n        axis.text.y=element_text(size=15)\n        )\ngg3\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-26-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change title face, color, line height\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + \n  labs(title = \"Plot Title\\nSecond Line of Plot Title\") +\n  theme(plot.title = element_text(\n    face=\"bold\", \n    color=\"steelblue\", \n    lineheight=1.2)\n  )\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-28-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change point color\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + scale_colour_manual(\n  name='Legend', \n  values=c('D'='grey', \n           'E'='red', \n           'F'='blue', \n           'G'='yellow', \n           'H'='black', \n           'I'='green', \n           'J'='firebrick'))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-30-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Adjust X and Y axis limits\n\nMethod 1: Zoom in\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + coord_cartesian(xlim=c(0,3), ylim=c(0, 5000)) + geom_smooth()  # zoom in\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-32-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nMethod 2: Deletes the points outside limits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + \n  xlim(c(0,3)) + \n  ylim(c(0, 5000)) + \n  geom_smooth()  # deletes the points \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 14714 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-34-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nMethod 3: Deletes the points outside limits\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + scale_x_continuous(limits=c(0,3)) + \n  scale_y_continuous(limits=c(0, 5000)) +\n  geom_smooth()  # deletes the points outside limits\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 14714 rows containing non-finite values (stat_smooth).\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 14714 rows containing missing values (geom_point).\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-36-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nNotice the change in smoothing line because of deleted points. This could\nsometimes be misleading in your analysis.\n\n## Change X and Y axis labels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + scale_x_continuous(\n  labels=c(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\")) \n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-38-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n  scale_y_continuous(breaks=seq(0, 20000, 4000))  # if Y is continuous, if X is a factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<ScaleContinuousPosition>\n Range:  \n Limits:    0 --    1\n```\n:::\n:::\n\n\n\nUse scale_x\\_discrete instead, if X variable is a factor.\n\nRotate axis text\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + theme(axis.text.x=element_text(angle=45), axis.text.y=element_text(angle=45))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-40-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Flip X and Y Axis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + coord_flip()  # flips X and Y axis.\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-42-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Grid lines and panel background\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + theme(panel.background = element_rect(fill = 'springgreen'),\n  panel.grid.major = element_line(colour = \"firebrick\", size=3),\n  panel.grid.minor = element_line(colour = \"blue\", size=1))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-44-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Plot margin and background\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + theme(plot.background=element_rect(fill=\"yellowgreen\"), plot.margin = unit(c(2, 4, 1, 3), \"cm\")) # top, right, bottom, left\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-46-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Legend\n\n## Hide legend\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + theme(legend.position=\"none\")  # hides the legend\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-48-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change legend title\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + scale_color_discrete(name=\"\")  # Remove legend title (method1)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-50-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Remove legend title (method)\np1 <- gg3 + theme(legend.title=element_blank())  \n\n# Change legend title\np2 <- gg3 + scale_color_discrete(name=\"Diamonds\")  \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"gridExtra\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gridExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n:::\n\n```{.r .cell-code}\ngrid.arrange(p1, p2, ncol=2)  # arrange\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-54-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change legend and point color\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + scale_colour_manual(name='Legend', values=c('D'='grey', 'E'='red', 'F'='blue', 'G'='yellow', 'H'='black', 'I'='green', 'J'='firebrick'))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-56-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change legend position\n\nOutside plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- gg3 + theme(legend.position=\"top\")  # top / bottom / left / right\n```\n:::\n\n\n\nInside plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- gg3 + theme(legend.justification=c(1,0), legend.position=c(1,0))  # legend justification is the anchor point on the legend, considering the bottom left of legend as (0,0)\ngridExtra::grid.arrange(p1, p2, ncol=2)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-60-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change order of legend items\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#df$newLegendColumn <- factor(df$legendcolumn, levels=c(new_order_of_legend_items), ordered = TRUE) \n```\n:::\n\n\n\nCreate a new factor variable used in the legend, ordered as you need. Then use\nthis variable instead in the plot.\n\n## Legend title, text, box, symbol\n\n-   `legend.title` - Change legend title\n-   `legend.text` - Change legend text\n-   `legend.key` - Change legend box\n-   `guides` - Change legend symbols\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + theme(legend.title = element_text(size=20, color = \"firebrick\"), legend.text = element_text(size=15), legend.key=element_rect(fill='steelblue')) + guides(colour = guide_legend(override.aes = list(size=2, shape=4, stroke=2)))  # legend title color and size, box color, symbol color, size and shape.\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-64-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Plot text and annotation\n\n## Add text in chart\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Not Run: gg + geom_text(aes(xcol, ycol, label=round(labelCol), size=3)) \n# general format \ngg + geom_text(aes(label=color, color=color), size=4)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-66-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n##Annotation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grid) \nmy_grob = grobTree(textGrob(\"My Custom Text\", x=0.8, y=0.2, \n                            gp=gpar(col=\"firebrick\", fontsize=25, fontface=\"bold\"))) \n\ngg3 + annotation_custom(my_grob)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-68-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Multiple plots\n\n## Multiple chart panels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- gg1 + facet_grid(color ~ cut) # arrange in a grid. More space for plots. Free X and Y axis scales\n```\n:::\n\n\n\nBy setting scales='free', the scales of both X and Y axis is freed. Use\nscales='free_x' to free only X-axis and scales='free_y' to free only Y-axis.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- gg1 + facet_wrap(color ~ cut, scales=\"free\") # free the x and yaxis scales. \n```\n:::\n\n\n\n## Arrange multiple plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra) \ngrid.arrange(p1, p2, ncol=2)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-74-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Geom layers\n\n## Add smoothing line\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg3 + geom_smooth(aes(color=color)) # method could be - 'lm', 'loess', 'gam'\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using method = 'gam' and formula 'y ~ s(x, bs = \"cs\")'\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-76-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Add horizontal / vertical line\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- gg3 + geom_hline(yintercept=5000, size=2, linetype=\"dotted\", color=\"blue\") # linetypes: solid, dashed, dotted, dotdash, longdash and twodash \np2 <- gg3 + geom_vline(xintercept=4, size=2, color=\"firebrick\") \np3 <- gg3 + geom_segment(aes(x=4, y=5000, xend=4, yend=10000, size=2, lineend=\"round\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Ignoring unknown aesthetics: lineend\n```\n:::\n\n```{.r .cell-code}\np4 <- gg3 + geom_segment(aes(x=carat, y=price,\nxend=carat, yend=price-500, color=color), size=2) + coord_cartesian(xlim=c(3, 5)) # x, y: start points. xend, yend: endpoints \ngridExtra::grid.arrange(p1,p2,p3,p4, ncol=2)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-78-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Add bar chart\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency bar chart: Specify only X axis. \ngg <- ggplot(mtcars, aes(x=cyl)) \ngg + geom_bar() # frequency table\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-80-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngg <- ggplot(mtcars, aes(x=cyl)) \np1 <- gg + geom_bar(position=\"dodge\", aes(fill=factor(vs))) # side-by-side \np2 <- gg + geom_bar(aes(fill=factor(vs))) # stacked \ngridExtra::grid.arrange(p1, p2, ncol=2)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-82-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Absolute bar chart: Specify both X adn Y axis. Set stat=\"identity\"\ndf <- aggregate(mtcars$mpg, by=list(mtcars$cyl), FUN=mean)  # mean of mpg for every 'cyl'\nnames(df) <- c(\"cyl\", \"mpg\")\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  cyl      mpg\n1   4 26.66364\n2   6 19.74286\n3   8 15.10000\n```\n:::\n\n```{.r .cell-code}\n#>   cyl    mpg\n#> 1   4  26.66\n#> 2   6  19.74\n#> 3   8  15.10\n\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\")  # Y axis is explicit. 'stat=identity'\nprint(gg_bar)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-84-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Distinct color for bars\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl))\nprint(gg_bar)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-86-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change color and width of bars\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf$cyl <- as.factor(df$cyl)\ngg_bar <- ggplot(df, aes(x=cyl, y=mpg)) + geom_bar(stat = \"identity\", aes(fill=cyl), width = 0.25)\ngg_bar + scale_fill_manual(values=c(\"4\"=\"steelblue\", \"6\"=\"firebrick\", \"8\"=\"darkgreen\"))\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-88-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Change color palette\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'RColorBrewer' was built under R version 4.0.5\n```\n:::\n\n```{.r .cell-code}\ndisplay.brewer.all(n=20, exact.n=FALSE)  # display available color palettes\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-90-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nggplot(mtcars, aes(x=cyl, y=carb, fill=factor(cyl))) + geom_bar(stat=\"identity\") + scale_fill_brewer(palette=\"Reds\")  # \"Reds\" is palette name\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-90-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Line chart\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 1:\ngg <- ggplot(economics, aes(x=date))  # setup\ngg + geom_line(aes(y=psavert), size=2, color=\"firebrick\") + geom_line(aes(y=uempmed), size=1, color=\"steelblue\", linetype=\"twodash\")  # No legend\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-92-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# available linetypes: solid, dashed, dotted, dotdash, longdash and twodash\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method 2:\n#install.packages(\"reshape2\")\nlibrary(reshape2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'reshape2'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    smiths\n```\n:::\n\n```{.r .cell-code}\ndf_melt <- melt(economics[, c(\"date\", \"psavert\", \"uempmed\")], id=\"date\")  # melt by date. \ngg <- ggplot(df_melt, aes(x=date))  # setup\ngg + geom_line(aes(y=value, color=variable), size=1) + scale_color_discrete(name=\"Legend\")  # gets legend.\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-94-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Line chart from timeseries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# One step method.\n# install.packages(\"ggfortify\")\nlibrary(ggfortify)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'ggfortify' was built under R version 4.0.5\n```\n:::\n\n```{.r .cell-code}\nautoplot(AirPassengers, size=2) + labs(title=\"AirPassengers\")\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-96-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Ribbons\n\nFilled time series can be plotted using geom_ribbon(). It takes two compulsory\narguments ymin and ymax.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the dataframe\nst_year <- start(AirPassengers)[1]\nst_month <- \"01\"\nst_date <- as.Date(paste(st_year, st_month, \"01\", sep=\"-\"))\ndates <- seq.Date(st_date, length=length(AirPassengers), by=\"month\")\ndf <- data.frame(dates, AirPassengers, AirPassengers/2)\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       dates AirPassengers AirPassengers.2\n1 1949-01-01           112            56.0\n2 1949-02-01           118            59.0\n3 1949-03-01           132            66.0\n4 1949-04-01           129            64.5\n5 1949-05-01           121            60.5\n6 1949-06-01           135            67.5\n```\n:::\n\n```{.r .cell-code}\n#>        dates AirPassengers AirPassengers.2\n#> 1 1949-01-01           112            56.0\n#> 2 1949-02-01           118            59.0\n#> 3 1949-03-01           132            66.0\n#> 4 1949-04-01           129            64.5\n#> 5 1949-05-01           121            60.5\n#> 6 1949-06-01           135            67.5\n# Plot ribbon with ymin=0\ngg <- ggplot(df, aes(x=dates)) + labs(title=\"AirPassengers\") + theme(plot.title=element_text(size=30), axis.title.x=element_text(size=20), axis.text.x=element_text(size=15))\ngg + geom_ribbon(aes(ymin=0, ymax=AirPassengers)) + geom_ribbon(aes(ymin=0, ymax=AirPassengers.2), fill=\"green\")\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-98-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngg + geom_ribbon(aes(ymin=AirPassengers-20, ymax=AirPassengers+20)) + geom_ribbon(aes(ymin=AirPassengers.2-20, ymax=AirPassengers.2+20), fill=\"green\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nDon't know how to automatically pick scale for object of type ts. Defaulting to continuous.\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-100-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n## Area\n\ngeom_area is similar to geom_ribbon, except that the ymin is set to 0. If you\nwant to make overlapping area plot, use the alpha aesthetic to make the top\nlayer translucent.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Method1: Non-Overlapping Area\ndf <- reshape2::melt(economics[, c(\"date\", \"psavert\", \"uempmed\")], id=\"date\")\nhead(df, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date variable value\n1 1967-07-01  psavert  12.6\n2 1967-08-01  psavert  12.6\n3 1967-09-01  psavert  11.9\n```\n:::\n\n```{.r .cell-code}\n#>         date variable value\n#> 1 1967-07-01  psavert  12.5\n#> 2 1967-08-01  psavert  12.5\n#> 3 1967-09-01  psavert  11.7\np1 <- ggplot(df, aes(x=date)) + geom_area(aes(y=value, fill=variable)) + labs(title=\"Non-Overlapping - psavert and uempmed\")\n\n# Method2: Overlapping Area\np2 <- ggplot(economics, aes(x=date)) + geom_area(aes(y=psavert), fill=\"yellowgreen\", color=\"yellowgreen\") + geom_area(aes(y=uempmed), fill=\"dodgerblue\", alpha=0.7, linetype=\"dotted\") + labs(title=\"Overlapping - psavert and uempmed\")\ngridExtra::grid.arrange(p1, p2, ncol=2)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-102-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Boxplot and Violin\n\nThe oulier points are controlled by the following aesthetics:\n\n-   outlier.shape\n-   outlier.stroke\n-   outlier.size\n-   outlier.colour\n\nIf the notch is turned on (by setting it TRUE), the below boxplot is produced.\nElse, you would get the standard rectangular boxplots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- ggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot(aes(fill = factor(cyl)), width=0.5, outlier.colour = \"dodgerblue\", outlier.size = 4, outlier.shape = 16, outlier.stroke = 2, notch=T) + labs(title=\"Box plot\")  # boxplot\np2 <- ggplot(mtcars, aes(factor(cyl), mpg)) + geom_violin(aes(fill = factor(cyl)), width=0.5, trim=F) + labs(title=\"Violin plot (untrimmed)\")  # violin plot\ngridExtra::grid.arrange(p1, p2, ncol=2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nnotch went outside hinges. Try setting notch=FALSE.\nnotch went outside hinges. Try setting notch=FALSE.\n```\n:::\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-104-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Density\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(mpg)) + geom_density(aes(fill = factor(cyl)),\nsize=2) + labs(title=\"Density plot\") \n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-106-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Tiles\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr <- round(cor(mtcars), 2)\ndf <- reshape2::melt(corr)\ngg <- ggplot(df, aes(x=Var1, y=Var2, fill=value, label=value)) + geom_tile() + theme_bw() + geom_text(aes(label=value, size=value), color=\"white\") + labs(title=\"mtcars - Correlation plot\") + theme(text=element_text(size=20), legend.position=\"none\")\n\nlibrary(RColorBrewer)\np2 <- gg + scale_fill_distiller(palette=\"Reds\")\np3 <- gg + scale_fill_gradient2()\ngridExtra::grid.arrange(gg, p2, p3, ncol=3)\n```\n\n::: {.cell-output-display}\n![](M12-01-GGPlot_files/figure-pdf/unnamed-chunk-108-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n> <http://r-statistics.co/ggplot2-cheatsheet.html>\n",
    "supporting": [
      "M12-01-GGPlot_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}