{
  "hash": "2e14ca379609aa1969147f4bd4b5e265",
  "result": {
    "markdown": "# NB: The `dplyr` package\n\nThe `dplyr` package was developed by Hadley Wickham of RStudio. It is an optimized and distilled version of his previous `plyr` package, which was an attempt to organize much of the functionality of the `*apply` family of functions in base R. Although in many ways superseded the `plyr` and `dplyr`, [these older functions remain useful](https://stackoverflow.com/questions/3505701/grouping-functions-tapply-by-aggregate-and-the-apply-family).\n\nThe `dplyr` package does not provide any new functionality to R per se; everything `dplyr` does could already be done with base R. But it *greatly* simplifies existing functionality in R.\n\nOne important contribution of the `dplyr` package is that it provides a **grammar** for data manipulation and for operating on data frames.\n\nWith this grammar, you can clearly **express and** **communicate** what it is that you are doing to a data frame that other people can understand.\n\nThis is useful because it provides an abstraction for data manipulation that previously did not exist within R and other programming languages.\n\nAnother useful contribution is that the `dplyr` functions are **very** fast, as many key operations are coded in C++.\n\n## `dplyr` Grammar\n\nSome of the key \"verbs\" provided by the `dplyr` package are:\n\n-   `select`: return a subset of the columns of a data frame, using a flexible notation\n\n-   `filter`: extract a subset of rows from a data frame based on logical conditions\n\n-   `arrange`: reorder rows of a data frame\n\n-   `rename`: rename variables in a data frame\n\n-   `mutate`: add new variables/columns or transform existing variables\n\n-   `summarise` / `summarize`: generate summary statistics of different variables in the data frame, possibly within strata\n\n-   `%>%`: the \"pipe\" operator is used to connect multiple verb actions together into a pipeline\n\n## Common `dplyr` Function Properties\n\nAll of the functions that we will discuss in this Chapter will have a few common characteristics. In particular,\n\n1.  The **first argument** is a **data frame**.\n\n2.  The subsequent arguments describe what to do with the data frame specified in the first argument, and **you can refer to columns in the data frame directly** without using the \\$ operator (just use the column names).\n\n3.  The **return** result of a function is **a new data frame**.\n\n4.  **Data frames must be properly formatted and annotated** for this to all be useful.\n\nIn particular, the data must be [tidy](https://tidyr.tidyverse.org/articles/tidy-data.html) The main principles of tidy data are:\n\n1.  Each variable forms a column.\n\n2.  Each observation forms a row.\n\n3.  Each type of observational unit forms a table.\n\n## Installing the `dplyr` package\n\nThe `dplyr` package can be installed from CRAN or from GitHub using the `devtools` package and the `install_github()` function.\n\nThe GitHub repository will usually contain the latest updates to the package and the development version.\n\nTo install from CRAN, just run\n\n``` r\ninstall.packages(\"dplyr\")\n```\n\nTo install from GitHub you can run\n\n``` r\ninstall_github(\"hadley/dplyr\")\n```\n\nAfter installing the package it is important that you load it into your R session with the `library()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.0.5\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n\nYou may get some warnings when the package is loaded because there are functions in the `dplyr` package that have the same name as functions in other packages. For now you can ignore the warnings.\n\n## Getting a dataset\n\nLet's use a dataset containing air pollution and temperature data for the [city of Chicago](http://www.biostat.jhsph.edu/~rpeng/leanpub/rprog/chicago_data.zip) in the U.S.\n\nYou will find the data in the directory for this module.\n\nLoad the data into R using the `readRDS()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago <- readRDS(\"chicago.rds\")\n```\n:::\n\n\nYou can see some basic characteristics of the dataset with the `dim()` and `str()` functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(chicago)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6940    8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(chicago)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6940 obs. of  8 variables:\n $ city      : chr  \"chic\" \"chic\" \"chic\" \"chic\" ...\n $ tmpd      : num  31.5 33 33 29 32 40 34.5 29 26.5 32.5 ...\n $ dptp      : num  31.5 29.9 27.4 28.6 28.9 ...\n $ date      : Date, format: \"1987-01-01\" \"1987-01-02\" ...\n $ pm25tmean2: num  NA NA NA NA NA NA NA NA NA NA ...\n $ pm10tmean2: num  34 NA 34.2 47 NA ...\n $ o3tmean2  : num  4.25 3.3 3.33 4.38 4.75 ...\n $ no2tmean2 : num  20 23.2 23.8 30.4 30.3 ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chicago)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233\n```\n:::\n:::\n\n\n# Core Methods\n\n## `select()`\n\nWe use the `select()` function to **select columns you want to focus on**.\n\nSuppose we wanted to take the first 3 columns only.\n\nThere are a few ways to do this.\n\nWe could for example use numerical indices.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chicago[names(chicago)[1:3]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd   dptp\n1 chic 31.5 31.500\n2 chic 33.0 29.875\n3 chic 33.0 27.375\n4 chic 29.0 28.625\n5 chic 32.0 28.875\n6 chic 40.0 35.125\n```\n:::\n:::\n\n\nBut we can also use the names directly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  select(city:dptp) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   city tmpd   dptp\n1  chic 31.5 31.500\n2  chic 33.0 29.875\n3  chic 33.0 27.375\n4  chic 29.0 28.625\n5  chic 32.0 28.875\n6  chic 40.0 35.125\n7  chic 34.5 26.750\n8  chic 29.0 22.000\n9  chic 26.5 29.000\n10 chic 32.5 27.750\n```\n:::\n:::\n\n\nNote the use of `:` inside the `select()` --- you can use it to specify a range of variable names.\n\nYou can also *omit* variables using the `select()` function by using **the negative sign**.\n\nWith `select()` you can do:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n    select(-(city:dptp)) %>% \n    head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  1987-01-01         NA   34.00000  4.250000  19.98810\n2  1987-01-02         NA         NA  3.304348  23.19099\n3  1987-01-03         NA   34.16667  3.333333  23.81548\n4  1987-01-04         NA   47.00000  4.375000  30.43452\n5  1987-01-05         NA         NA  4.750000  30.33333\n6  1987-01-06         NA   48.00000  5.833333  25.77233\n7  1987-01-07         NA   41.00000  9.291667  20.58171\n8  1987-01-08         NA   36.00000 11.291667  17.03723\n9  1987-01-09         NA   33.28571  4.500000  23.38889\n10 1987-01-10         NA         NA  4.958333  19.54167\n```\n:::\n:::\n\n\nThis indicates that we should include every variable *except* the variables `city` through `dptp`.\n\nThe equivalent code in base R would be\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- match(\"city\", names(chicago))\nj <- match(\"dptp\", names(chicago))\nhead(chicago[, -(i:j)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 1987-01-01         NA   34.00000 4.250000  19.98810\n2 1987-01-02         NA         NA 3.304348  23.19099\n3 1987-01-03         NA   34.16667 3.333333  23.81548\n4 1987-01-04         NA   47.00000 4.375000  30.43452\n5 1987-01-05         NA         NA 4.750000  30.33333\n6 1987-01-06         NA   48.00000 5.833333  25.77233\n```\n:::\n:::\n\n\nNot super intuitive, right?\n\nThe `select()` function also allows a special syntax that allows you to specify **variable names based on patterns**.\n\nSo, for example, if you wanted to keep every variable that ends with a \"2\", we could do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  select(ends_with(\"2\")) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1          NA   34.00000  4.250000  19.98810\n2          NA         NA  3.304348  23.19099\n3          NA   34.16667  3.333333  23.81548\n4          NA   47.00000  4.375000  30.43452\n5          NA         NA  4.750000  30.33333\n6          NA   48.00000  5.833333  25.77233\n7          NA   41.00000  9.291667  20.58171\n8          NA   36.00000 11.291667  17.03723\n9          NA   33.28571  4.500000  23.38889\n10         NA         NA  4.958333  19.54167\n```\n:::\n:::\n\n\nOr if we wanted to keep every variable that starts with a \"d\", we could do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  select(starts_with(\"d\")) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     dptp       date\n1  31.500 1987-01-01\n2  29.875 1987-01-02\n3  27.375 1987-01-03\n4  28.625 1987-01-04\n5  28.875 1987-01-05\n6  35.125 1987-01-06\n7  26.750 1987-01-07\n8  22.000 1987-01-08\n9  29.000 1987-01-09\n10 27.750 1987-01-10\n```\n:::\n:::\n\n\nThis is super useful if you have a table with prefixes, such as `doc_`.\n\nYou can also use more general **regular expressions** if necessary.\n\nSee `?select` for more info.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?select\n```\n:::\n\n\n## Aside: Helper Functions\n\nNote the use the function `ends_with()` inside of the argument space for the function `select()` above.\n\n`ends_with()` is an example of a \"helper function\" --- a function that helps make dplyr functions more effective.\n\nThere are many of these introduced by dplyer. Here is a set of helper functions that can be especially useful with `select()` and related functions to specify variable names based on certain patterns or characteristics:\n\n| Helper Function | Description                                                    | Example                                        |\n|------------------|-------------------------------|-----------------------|\n| `starts_with()` | Matches variable names that start with a given prefix          | `select(data, starts_with(\"X\"))`               |\n| `ends_with()`   | Matches variable names that end with a given suffix            | `select(data, ends_with(\"_2019\"))`             |\n| `contains()`    | Matches variable names that contain a given string             | `select(data, contains(\"income\"))`             |\n| `matches()`     | Matches variable names that match a given regular expression   | `select(data, matches(\"^X[1-3]$\"))`            |\n| `num_range()`   | Matches variable names that match a pattern of prefix + number | `select(data, num_range(\"X\", 1:3))`            |\n| `one_of()`      | Matches variable names that are in a given set of names        | `select(data, one_of(c(\"var1\", \"var2\")))`      |\n| `everything()`  | Matches all variable names (used to reorder variables)         | `select(data, starts_with(\"X\"), everything())` |\n\n## `filter()`\n\nThe `filter()` function extracts **subsets of rows** from a data frame.\n\n::: callout-note\n`select()` is a **column-wise** operation, `filter()` is **row-wise**.\n:::\n\nThis function is similar to the existing `subset()` function in R but is quite a bit faster.\n\nSuppose we wanted to extract the rows of the `chicago` data frame where **the levels of PM2.5 are greater than 30** (which is a reasonably high level), we could do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  filter(pm25tmean2 > 30) %>%\n  head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1  chic   23 21.9 1998-01-17      38.10   32.46154  3.180556  25.30000\n2  chic   28 25.8 1998-01-23      33.95   38.69231  1.750000  29.37630\n3  chic   55 51.3 1998-04-30      39.40   34.00000 10.786232  25.31310\n4  chic   59 53.7 1998-05-01      35.40   28.50000 14.295125  31.42905\n5  chic   57 52.0 1998-05-02      33.30   35.00000 20.662879  26.79861\n6  chic   57 56.0 1998-05-07      32.10   34.50000 24.270422  33.99167\n7  chic   75 65.8 1998-05-15      56.50   91.00000 38.573007  29.03261\n8  chic   61 59.0 1998-06-09      33.80   26.00000 17.890810  25.49668\n9  chic   73 60.3 1998-07-13      30.30   64.50000 37.018865  37.93056\n10 chic   78 67.1 1998-07-14      41.40   75.00000 40.080902  32.59054\n```\n:::\n:::\n\n\nYou can see that there are now only 194 rows in the data frame and the distribution of the `pm25tmean2` values is.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(chicago$pm25tmean2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n   1.70    9.70   14.66   16.23   20.60   61.50    4447 \n```\n:::\n:::\n\n\nWe can place an arbitrarily complex logical sequence inside of `filter()`, so we could for example extract the rows where PM2.5 is greater than 30 *and* temperature is greater than 80 degrees Fahrenheit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  filter(pm25tmean2 > 30 & tmpd > 80) %>%\n  select(date, tmpd, pm25tmean2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date tmpd pm25tmean2\n1  1998-08-23   81   39.60000\n2  1998-09-06   81   31.50000\n3  2001-07-20   82   32.30000\n4  2001-08-01   84   43.70000\n5  2001-08-08   85   38.83750\n6  2001-08-09   84   38.20000\n7  2002-06-20   82   33.00000\n8  2002-06-23   82   42.50000\n9  2002-07-08   81   33.10000\n10 2002-07-18   82   38.85000\n11 2003-06-25   82   33.90000\n12 2003-07-04   84   32.90000\n13 2005-06-24   86   31.85714\n14 2005-06-27   82   51.53750\n15 2005-06-28   85   31.20000\n16 2005-07-17   84   32.70000\n17 2005-08-03   84   37.90000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n?filter\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on topic 'filter' was found in the following packages:\n\n  Package               Library\n  dplyr                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n  stats                 /Library/Frameworks/R.framework/Versions/4.0/Resources/library\n\n\nUsing the first match ...\n```\n:::\n:::\n\n\nHere's a table of helper functions specifically associated with `filter()`:\n\n| **Helper Function**  | **Description**                                                                                | **Example**                                          |\n|-------------------|---------------------------------|--------------------|\n| `between()`          | Check if a value lies between two other values.                                                | `filter(data, between(age, 18, 30))`                 |\n| `near()`             | Check for near equality (useful for floating-point numbers).                                   | `filter(data, near(price, 19.99, tolerance = 0.01))` |\n| `isin()` (or `%in%`) | Check if a value is in a set of values.                                                        | `filter(data, region %in% c(\"East\", \"West\"))`        |\n| `all_of()`           | Check for all of the variables, even if some don't exist. Useful with character vectors.       | `filter(data, all_of(variables))`                    |\n| `any_of()`           | Check for any of the variables. Useful with character vectors.                                 | `filter(data, any_of(variables))`                    |\n| `cur_group_id()`     | Identify the current group inside `group_by()`. Useful for more complex filtering with groups. | `filter(data, cur_group_id() == 1)`                  |\n\n## `arrange()`\n\nUse `arrange()` to **reorder rows** of a data frame according to one or more of the **columns**. This normally called **sorting**.\n\nReordering rows of a data frame (while preserving corresponding order of other columns) is normally a pain to do in R.\n\nThe `arrange()` function simplifies the process quite a bit.\n\nHere we order the rows of the data frame by date in ascending order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago_by_date <- chicago %>%\n  arrange(date)\n\nhead(chicago_by_date)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd   dptp       date pm25tmean2 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5 31.500 1987-01-01         NA   34.00000 4.250000  19.98810\n2 chic 33.0 29.875 1987-01-02         NA         NA 3.304348  23.19099\n3 chic 33.0 27.375 1987-01-03         NA   34.16667 3.333333  23.81548\n4 chic 29.0 28.625 1987-01-04         NA   47.00000 4.375000  30.43452\n5 chic 32.0 28.875 1987-01-05         NA         NA 4.750000  30.33333\n6 chic 40.0 35.125 1987-01-06         NA   48.00000 5.833333  25.77233\n```\n:::\n:::\n\n\nWe can now check the first few rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago_by_date %>%\n  select(date, pm25tmean2) %>%\n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        date pm25tmean2\n1 1987-01-01         NA\n2 1987-01-02         NA\n3 1987-01-03         NA\n```\n:::\n:::\n\n\nand the last few rows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago_by_date %>%\n  select(date, pm25tmean2) %>%\n  tail(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           date pm25tmean2\n6938 2005-12-29    7.45000\n6939 2005-12-30   15.05714\n6940 2005-12-31   15.00000\n```\n:::\n:::\n\n\nColumns can be arranged in descending order too by using the special `desc()` operator.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  arrange(desc(date)) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd dptp       date pm25tmean2 pm10tmean2  o3tmean2 no2tmean2\n1 chic   35 30.1 2005-12-31   15.00000       23.5  2.531250  13.25000\n2 chic   36 31.0 2005-12-30   15.05714       19.2  3.034420  22.80556\n3 chic   35 29.4 2005-12-29    7.45000       23.5  6.794837  19.97222\n4 chic   37 34.5 2005-12-28   17.75000       27.5  3.260417  19.28563\n5 chic   40 33.6 2005-12-27   23.56000       27.0  4.468750  23.50000\n6 chic   35 29.6 2005-12-26    8.40000        8.5 14.041667  16.81944\n```\n:::\n:::\n\n\nHere's a table of helper functions specifically associated with `arrange()`:\n\n| **Helper Function** | **Description**                                                                     | **Example**                               |\n|-------------------|----------------------------------|-------------------|\n| `desc()`            | Order by descending instead of default ascending.                                   | `arrange(data, desc(salary))`             |\n| `across()`          | Apply to multiple columns, especially with `c_across()` in `dplyr` 1.0.0 and later. | `arrange(data, across(starts_with(\"X\")))` |\n| `row_number()`      | Create an index based on the order of rows.                                         | `mutate(data, idx = row_number())`        |\n\nNote that while `row_number()` can be used in conjunction with `arrange()`, it's often seen in `mutate()` for creating an index column based on ordering.\n\nThe `across()` function, introduced in `dplyr` version 1.0.0, provides a more concise syntax for working with multiple columns. It can be especially useful in `arrange()` when you're trying to order rows based on a selection of columns that match a certain criterion.\n\nNote that most of the magic with `arrange()` happens through the way you structure its arguments and not necessarily through a large set of helper functions.\n\n## `rename()`\n\nRenaming a variable in a data frame in R is surprisingly hard to do!\n\nThe `rename()` function is designed to make this process easier.\n\nHere we the names of the first five variables in the `chicago` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(chicago[, 1:5], 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd   dptp       date pm25tmean2\n1 chic 31.5 31.500 1987-01-01         NA\n2 chic 33.0 29.875 1987-01-02         NA\n3 chic 33.0 27.375 1987-01-03         NA\n```\n:::\n:::\n\n\nThe `dptp` column is supposed to represent the dew point temperature and the `pm25tmean2` column provides the PM2.5 data.\n\nHowever, these names are awkward and should be renamed to something more sensible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago <- chicago %>%\n  rename(dewpoint = dptp, pm25 = pm25tmean2) \n\nchicago %>%  \n  head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548\n```\n:::\n:::\n\n\nThe syntax inside the `rename()` function is to have the new name on the left-hand side of the `=` sign and the old name on the right-hand side.\n\nI leave it as an exercise for the reader to figure how you do this in base R without `dplyr`.\n\nHere's a table of helper functions that can be used with `rename()`:\n\n| **Helper Function** | **Description**                                      | **Example**                                                                                                                     |\n|-------------------|-------------------|----------------------------------|\n| `starts_with()`     | Match columns that start with a given prefix.        | `rename(data, start_X = starts_with(\"X\"))` (Note: This example would rename the first column that starts with \"X\" to \"start_X\") |\n| `ends_with()`       | Match columns that end with a given suffix.          | `rename(data, end_year = ends_with(\"_2021\"))`                                                                                   |\n| `contains()`        | Match columns that contain a given string.           | `rename(data, has_rate = contains(\"rate\"))`                                                                                     |\n| `matches()`         | Match columns that match a given regular expression. | `rename(data, match_num = matches(\"^X[1-3]$\"))`                                                                                 |\n| `everything()`      | Match all columns.                                   | Rarely used with `rename()`, but possible.                                                                                      |\n\nIt's worth noting that these helper functions will typically target the first column that meets the specified criterion. If there are multiple columns that match the criterion (e.g., multiple columns that start with \"X\"), you'll need to use these helpers with more precision or utilize other techniques.\n\nAlso, remember to always refer to the official `dplyr` documentation as the package continues to evolve and new functionalities might be added over time.\n\n## `mutate()`\n\nThe `mutate()` function creates new columns based on computations usually involving the other columns.\n\nFor example, with air pollution data, **we often want to *de-trend* the data by subtracting the mean from the data**.\n\nThat way we can look at whether a given day's air pollution level is higher than or less than average (as opposed to looking at its absolute level).\n\nHere we create a `pm25detrend` variable that subtracts the mean from the `pm25` variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago <- chicago %>%\n  mutate(pm25detrend = pm25 - mean(pm25, na.rm = TRUE))\nchicago %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  city tmpd dewpoint       date pm25 pm10tmean2 o3tmean2 no2tmean2 pm25detrend\n1 chic 31.5   31.500 1987-01-01   NA   34.00000 4.250000  19.98810          NA\n2 chic 33.0   29.875 1987-01-02   NA         NA 3.304348  23.19099          NA\n3 chic 33.0   27.375 1987-01-03   NA   34.16667 3.333333  23.81548          NA\n4 chic 29.0   28.625 1987-01-04   NA   47.00000 4.375000  30.43452          NA\n5 chic 32.0   28.875 1987-01-05   NA         NA 4.750000  30.33333          NA\n6 chic 40.0   35.125 1987-01-06   NA   48.00000 5.833333  25.77233          NA\n```\n:::\n:::\n\n\nThere is also the related `transmute()` function, which does the same thing as `mutate()` but then ***drops all non-transformed variables***.\n\nHere we de-trend the PM10 and ozone (O3) variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago_detrended <- chicago %>%\n  transmute(pm10detrend = pm10tmean2 - mean(pm10tmean2, na.rm = TRUE), \n            o3detrend = o3tmean2 - mean(o3tmean2, na.rm = TRUE))\n\nhead(chicago_detrended)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pm10detrend o3detrend\n1   0.1047939 -15.18551\n2          NA -16.13117\n3   0.2714605 -16.10218\n4  13.1047939 -15.06051\n5          NA -14.68551\n6  14.1047939 -13.60218\n```\n:::\n:::\n\n\nNote that there are only two columns in the transmuted data frame.\n\nHere's a table of helper functions specifically associated with `mutate()`:\n\n| **Helper Function**                             | **Description**                                                | **Example**                                                                          |\n|------------------|-----------------------|-------------------------------|\n| `if_else()`                                     | A vectorized conditional operation (if-else).                  | `mutate(data, status = if_else(age < 18, \"minor\", \"adult\"))`                         |\n| `case_when()`                                   | Generalized multiple conditions for transformations.           | `mutate(data, category = case_when(score > 90 ~ \"A\", score > 80 ~ \"B\", TRUE ~ \"C\"))` |\n| `lead()`                                        | Access the subsequent value in the column.                     | `mutate(data, next_value = lead(column_name))`                                       |\n| `lag()`                                         | Access the preceding value in the column.                      | `mutate(data, previous_value = lag(column_name))`                                    |\n| `row_number()`                                  | Generate row numbers, often used with `arrange()`.             | `mutate(data, rank = row_number())`                                                  |\n| `rank()`, `min_rank()`, `dense_rank()`          | Different types of ranking functions.                          | `mutate(data, rank = rank(score))`                                                   |\n| `cumsum()`, `cumprod()`, `cummin()`, `cummax()` | Cumulative functions.                                          | `mutate(data, cumulative_total = cumsum(total))`                                     |\n| `coalesce()`                                    | Return the first non-missing value among its arguments.        | `mutate(data, combined = coalesce(col1, col2))`                                      |\n| `na_if()`                                       | Replace a specified value with NA.                             | `mutate(data, updated_col = na_if(column_name, \"replace_me\"))`                       |\n| `replace_na()`                                  | Replace NA values with a specified value.                      | `mutate(data, updated_col = replace_na(column_name, \"new_value\"))`                   |\n| `recode()`                                      | Recode or replace values in a column.                          | `mutate(data, recoded_col = recode(column_name, old=\"new\", ...))`                    |\n| `across()`                                      | Apply a function across multiple columns (from `dplyr` 1.0.0). | `mutate(data, across(c(col1, col2), function_name))`                                 |\n\n## `group_by()`\n\nThe `group_by()` function is used to generate **summary or aggregate statistics** from a data frame.\n\nFor example, in this air pollution dataset, you might want to know the **average annual level of PM2.5**.\n\nSo **the stratum is the year**, which we can derive from the `date` variable.\n\n**In conjunction with the `group_by()` function we often use the `summarize()` function.**\n\nThe general operation here is a combination of **splitting** a table into separate pieces defined by a variable or group of variables (`group_by()`), and then **applying** a summary function across those subsets (`summarize()`), then **combining** back into another table.\n\n> This pattern is called **split, apply, and combine**. It is a fundamental pattern in data processing.\n\nFirst, we can create a `year` variable using `as.POSIXlt()`.\n\nThen we group on our new column and compute summary statistics for each year with the `summarize()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyears <- chicago %>%\n  mutate(year = as.POSIXlt(date)$year + 1900) %>%\n  group_by(year) %>%\n  summarize(pm25 = mean(pm25, na.rm = TRUE), \n          o3 = max(o3tmean2, na.rm = TRUE), \n          no2 = median(no2tmean2, na.rm = TRUE), .groups = \"drop\")\n\nhead(years)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n   year  pm25    o3   no2\n  <dbl> <dbl> <dbl> <dbl>\n1  1987   NaN  63.0  23.5\n2  1988   NaN  61.7  24.5\n3  1989   NaN  59.7  26.1\n4  1990   NaN  52.2  22.6\n5  1991   NaN  63.1  21.4\n6  1992   NaN  50.8  24.8\n```\n:::\n:::\n\n\nTo see why we add $1900$ in the preceding mutation, note that the date function returns just the last two digits of the year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.POSIXlt(chicago$date)$year %>% \n    head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 87 87 87 87 87 87\n```\n:::\n:::\n\n\nNote in the process, we implicitly created a separate data frame that splits the original data frame by year, which is then passed to `summarize()`.\n\n`summarize()` then returns a data frame with columns for `year` and the annual averages of `pm25`, `o3`, and `no2`.\n\nIn a slightly more complicated example, we might want to know what are the average levels of ozone (`o3`) and nitrogen dioxide (`no2`) within quantiles of `pm25`.\n\nA slicker way to do this would be through a regression model, but we can actually do this quickly with `group_by()` and `summarize()`.\n\nFirst, we can create a categorical variable of `pm25` divided into quantiles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqq <- quantile(chicago$pm25, seq(0, 1, 0.2), na.rm = TRUE)\nqq\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    0%    20%    40%    60%    80%   100% \n 1.700  8.700 12.375 16.700 22.610 61.500 \n```\n:::\n:::\n\n\nThen can group the data frame by the `pm25.quint` variable. and compute the mean of `o3` and `no2` within quantiles of `pm25`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%\n  mutate(pm25.quint = cut(pm25, qq)) %>%\n  group_by(pm25.quint) %>%\n  summarize(o3 = mean(o3tmean2, na.rm = TRUE), \n          no2 = mean(no2tmean2, na.rm = TRUE),\n          .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  pm25.quint     o3   no2\n  <fct>       <dbl> <dbl>\n1 (1.7,8.7]    21.7  18.0\n2 (8.7,12.4]   20.4  22.1\n3 (12.4,16.7]  20.7  24.4\n4 (16.7,22.6]  19.9  27.3\n5 (22.6,61.5]  20.3  29.6\n6 <NA>         18.8  25.8\n```\n:::\n:::\n\n\nFrom the table, it seems there isn't a strong relationship between `pm25` and `o3`, but there appears to be a positive correlation between `pm25` and `no2`.\n\nMore sophisticated statistical modeling can help to provide precise answers to these questions, but a simple application of `dplyr` functions can often get you most of the way there.\n\nHere is another example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchicago %>%  \n  mutate(month = as.POSIXlt(date)$mon + 1) %>% \n  group_by(month) %>%                              # SPLIT\n  summarize(pm25 = mean(pm25, na.rm = TRUE),       # APPLY \n    o3 = max(o3tmean2, na.rm = TRUE), \n    no2 = median(no2tmean2, na.rm = TRUE),\n    .groups = \"drop\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 4\n   month  pm25    o3   no2\n   <dbl> <dbl> <dbl> <dbl>\n 1     1  17.8  28.2  25.4\n 2     2  20.4  37.4  26.8\n 3     3  17.4  39.0  26.8\n 4     4  13.9  47.9  25.0\n 5     5  14.1  52.8  24.2\n 6     6  15.9  66.6  25.0\n 7     7  16.6  59.5  22.4\n 8     8  16.9  54.0  23.0\n 9     9  15.9  57.5  24.5\n10    10  14.2  47.1  24.2\n11    11  15.2  29.5  23.6\n12    12  17.5  27.7  24.5\n```\n:::\n\n```{.r .cell-code}\n                                                   # COMBINE (in the result)\n```\n:::\n\n\nHere's a table of helper functions specifically associated with `group_by()`:\n\n| **Helper Function**                             | **Description**                                                                                                 | **Example**                                                              |\n|------------------|--------------------------------|----------------------|\n| `add_tally()`                                   | Adds a column with the count of each group (equivalent to adding a count with `mutate()` after a `group_by()`). | `group_by(data, group_var) %>% add_tally()`                              |\n| `group_size()`                                  | Returns the size of each group.                                                                                 | `group_by(data, group_var) %>% summarise(size = group_size())`           |\n| `ntile()`                                       | Creates rank percentiles within groups.                                                                         | `group_by(data, group_var) %>% mutate(perc = ntile(score, 4))`           |\n| `cur_group_id()`                                | Gives an integer identifier for the current group.                                                              | `group_by(data, group_var) %>% filter(cur_group_id() == 1)`              |\n| `cur_group_rows()`                              | Provides row indices for the current group.                                                                     | Used internally, but can be useful for advanced operations.              |\n| `group_map()`, `group_modify()`, `group_walk()` | Functions to iterate over groups, modify them or walk them with side effects.                                   | `group_map(data, ~ head(.x, 2))` shows the first two rows of each group. |\n\nIt's worth noting that `group_by()` often works in tandem with other verbs, so the real power comes from the combined operations. For instance, after grouping data, one often uses `summarise()` to calculate summary statistics for each group. The combination of these functions and their associated helpers allow for a wide range of group-wise data manipulation tasks.\n\n# Summary\n\nThe `dplyr` package provides a concise set of operations for managing data frames and tibbles.\n\nIt allows us to perform a number of complex operations in just a few lines of code.\n\nIn particular, we can often conduct the beginnings of an exploratory analysis with the powerful combination of `group_by()` and `summarize()`.\n\nOnce you learn the `dplyr` grammar there are a few additional benefits --- `dplyr` can work with other data frame \"back ends\" such as SQL databases. There is an SQL interface for relational databases via the DBI package --- `dplyr` can be integrated with the `data.table` package for large fast tables\n\nThe `dplyr` package is handy way to both simplify and speed up your data frame management code. It's rare that you get such a combination at the same time!\n\n------------------------------------------------------------------------\n\n> Based on [Peng 2022](https://bookdown.org/rdpeng/rprogdatascience/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}